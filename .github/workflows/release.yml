name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    name: Build and Release ${{ matrix.os }}/${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [Ubuntu]
        python-version: ["3.10", "3.11", "3.12"]
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo "version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")" >> $GITHUB_OUTPUT

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: Pip cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-
            pip-${{ runner.os }}-

      - name: Virtualenv cache
        uses: actions/cache@v4
        id: cache-venv
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('poetry.lock') }}

      - name: Update make
        if: startsWith(runner.os, 'macOS')
        run: |
          brew install make
          echo 'export PATH=/usr/local/opt/make/libexec/gnubin:$PATH' >> ~/.bash_profile

      - name: Bootstrap
        shell: bash
        run: |
          # For mac
          [[ -f ~/.bash_profile ]] && source ~/.bash_profile
          python -m ensurepip
          python -m pip install --upgrade pip pre-commit poetry
          make PRECOMMIT=n dev
          sudo apt update
          sudo apt install libegl1

      - name: Build packages
        shell: bash
        run: make release

      - name: Get version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(grep '^version = ' pyproject.toml | cut -d '"' -f 2)
            VERSION="v${VERSION}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## Installation

            ### Using pip
            ```bash
            pip install openconnect_sso-${{ steps.get_version.outputs.version }}-py3-none-any.whl
            ```

            ### Using nix flakes
            ```bash
            nix run github:PrestonHager/openconnect-sso/${{ steps.get_version.outputs.version }}
            ```

            See the [README.md](https://github.com/PrestonHager/openconnect-sso#installation) for more installation options.
          draft: false
          prerelease: false

      - name: Upload wheel asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/openconnect_sso-*-py3-none-any.whl
          asset_name: openconnect_sso-${{ steps.get_version.outputs.version }}-py3-none-any.whl
          asset_content_type: application/octet-stream

      - name: Upload source distribution asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/openconnect_sso-*.tar.gz
          asset_name: openconnect_sso-${{ steps.get_version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload changelog
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/CHANGELOG-${{ steps.get_version.outputs.version }}.md
          asset_name: CHANGELOG-${{ steps.get_version.outputs.version }}.md
          asset_content_type: text/markdown
